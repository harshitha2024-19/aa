{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/harshitha2024-19/aa/blob/main/linearegression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R4GJChbQ15nV"
      },
      "source": [
        "## Coding Exercise #0702"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-yZajf1S15nc"
      },
      "source": [
        "### 1. Linear regression:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N0ka8l6815nd",
        "outputId": "bab402b7-5e60-4ae5-afdd-d2102db6ebca"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.12/dist-packages/tensorflow/python/compat/v2_compat.py:98: disable_resource_variables (from tensorflow.python.ops.resource_variables_toggle) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "non-resource variables are not supported in the long term\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "# import tensorflow as tf\n",
        "import tensorflow.compat.v1 as tf\n",
        "\n",
        "tf.disable_v2_behavior()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IYyHeLst15nf"
      },
      "source": [
        "#### 1.1. Data:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "BhxdVlM115ng"
      },
      "outputs": [],
      "source": [
        "# Training data.\n",
        "# hours of study (X) vs test score (y).\n",
        "study = np.array([ 3, 4.5, 6, 1.2, 2, 6.9, 6.7, 5.5])          # Explanatory variable: X\n",
        "score = np.array([ 88, 85, 90, 80, 81, 92, 95, 90])            # Response variable: y"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uLdj4vEC15nh"
      },
      "source": [
        "#### 1.2. Define Variables and Placeholders:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "ogRc2ytB15nh"
      },
      "outputs": [],
      "source": [
        "b1 = tf.Variable(1.0)                # A constant initial value.\n",
        "b0 = tf.Variable(1.0)                # A constant initial value."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "SsB-WrpN15ni"
      },
      "outputs": [],
      "source": [
        "X_ph = tf.placeholder(tf.float32, shape=(None))                # We don't need to fix the number of observations.\n",
        "y_ph = tf.placeholder(tf.float32, shape=(None))                # We can just leave the size = None."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S7awhlfr15nj"
      },
      "source": [
        "#### 1.3. Define the model:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "hEQ0SCVL15nj"
      },
      "outputs": [],
      "source": [
        "y_model = b0 + b1*X_ph                                         # Simple linear regression model."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1kf_16F915nj"
      },
      "source": [
        "#### 1.4. Define the loss function and the optimization method:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "CmoxWKDi15nk"
      },
      "outputs": [],
      "source": [
        "loss = tf.reduce_sum(tf.square(y_ph - y_model))          # L2 loss."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "zfdY_8VC15nk"
      },
      "outputs": [],
      "source": [
        "optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)\n",
        "# optimizer = tf.train.MomentumOptimizer(learning_rate = 0.001, momentum=0.9)   # Momentum optimizer."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "aGw4gUMR15nk"
      },
      "outputs": [],
      "source": [
        "train = optimizer.minimize(loss)                         # Define training."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "klimifDf15nl"
      },
      "outputs": [],
      "source": [
        "\n",
        "init = tf.global_variables_initializer()                 # Define Variable initialization."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D4TNgdKg15nl"
      },
      "source": [
        "#### 1.5. Training and Testing:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "6mEchB7r15nl"
      },
      "outputs": [],
      "source": [
        "n_epochs = 5000                                                   # N# of epochs (gradient descent steps).\n",
        "with tf.Session() as sess:\n",
        "        # Variables initialization.\n",
        "        sess.run(init)\n",
        "        # Training.\n",
        "        my_feed = {X_ph:study, y_ph:score}                        # Prepare feed data as a dictionary.\n",
        "        for i in range(n_epochs):\n",
        "            sess.run(train, feed_dict = my_feed)\n",
        "        b0_model, b1_model = sess.run([b0, b1])                   # Get the final values of the Variables.\n",
        "        # Testing.\n",
        "        mse = tf.reduce_mean(tf.square(y_ph - y_model))           # Define the test metric.\n",
        "        mse_value = sess.run(mse, feed_dict = my_feed)            # Calculate the in-sample MSE."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qy6C1oDU15nl"
      },
      "source": [
        "#### 1.6. Display the result:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rQ_Yiz3q15nl",
        "outputId": "62e33803-d64a-4ff9-f051-cfbe83d14988"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Parameters b0 = 77.683 , b1 = 2.222\n"
          ]
        }
      ],
      "source": [
        "print(\"Parameters b0 = {:5.3f} , b1 = {:5.3f}\".format(b0_model, b1_model))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "39QaWSad15nl",
        "outputId": "ebd6ef23-d994-4a2d-bdd4-c5d295c75af2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE  = 3.736\n",
            "RMSE = 1.933\n"
          ]
        }
      ],
      "source": [
        "print(\"MSE  = {:5.3f}\".format(mse_value))\n",
        "print(\"RMSE = {:5.3f}\".format(np.sqrt(mse_value)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z2FZogkF15nm"
      },
      "source": [
        "#### 1.7. Prediction:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "F4RD5TsF15nm"
      },
      "outputs": [],
      "source": [
        "# Define the testing data.\n",
        "study_new = np.array([2.5, 3.3, 4.2]).reshape(-1,1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "LruMNOSn15nm"
      },
      "outputs": [],
      "source": [
        "X_ph = tf.placeholder(tf.float32, shape=(study_new.size,1))\n",
        "y_model = b0_model + b1_model*X_ph                                # Define the prediction model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "CxLrAHVy15nm"
      },
      "outputs": [],
      "source": [
        "with tf.Session() as sess:\n",
        "        my_feed = {X_ph:study_new}\n",
        "        y_pred_value = sess.run(y_model, feed_dict = my_feed)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5QMlwhK415nm",
        "outputId": "e8bc937b-d64b-47c6-ab3c-e5127a811f90"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[83.23718]\n",
            " [85.01443]\n",
            " [87.01383]]\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# Predicted y values.\n",
        "print(y_pred_value)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "8HYZ4t-K15nm"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}